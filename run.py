#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:
- Telegram Observer –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
- ZMQ Publisher –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ ws_ohlcv_manager
- StreamManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket –ø–æ—Ç–æ–∫–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è OHLCV –±–∞—Ä–æ–≤
"""

import asyncio
import re
import threading
import time
from telethon import TelegramClient, events
from config import Config
from ws_ohlcv_manager import StreamManager


def extract_token_from_message(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `TOKENUSDT`"""
    if not text:
        return None
    match = re.search(r'`([A-Z0-9]+)`', text)
    return match.group(1).lower() if match else None


class TelegramStreamRunner:
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è:
    1. –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞
    2. –ò–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    3. –û—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ StreamManager —á–µ—Ä–µ–∑ ZMQ
    4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket –ø–æ—Ç–æ–∫–∞–º–∏ –¥–ª—è OHLCV –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        Config.validate()
        
        # Telegram –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient(
            'observer_session',
            Config.API_ID,
            Config.API_HASH
        )
        
        # StreamManager –¥–ª—è WebSocket –ø–æ—Ç–æ–∫–æ–≤
        self.stream_manager = StreamManager()
        
        # –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_event = threading.Event()
        
        print(f"üîß –°–æ–∑–¥–∞–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∫–∞–Ω–∞–ª–∞: {Config.CHANNEL_NAME}")

    async def find_channel(self, channel_name):
        """–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            if not channel_name.startswith('@'):
                channel_name = '@' + channel_name.replace(' ', '_').lower()
            
            entity = await self.client.get_entity(channel_name)
            return entity
            
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ username, –∏—â–µ–º —Å—Ä–µ–¥–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            print(f"üîç –ò—â–µ–º –∫–∞–Ω–∞–ª '{channel_name}' —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
            
            async for dialog in self.client.iter_dialogs():
                if hasattr(dialog.entity, 'title'):
                    title = dialog.entity.title.lower()
                    search_name = channel_name.replace('@', '').lower()
                    
                    if search_name in title or title in search_name:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: '{dialog.entity.title}' (ID: {dialog.entity.id})")
                        return dialog.entity
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã:")
            print("-" * 50)
            
            async for dialog in self.client.iter_dialogs():
                if hasattr(dialog.entity, 'title'):
                    entity_type = "–ö–∞–Ω–∞–ª" if hasattr(dialog.entity, 'broadcast') and dialog.entity.broadcast else "–ì—Ä—É–ø–ø–∞"
                    print(f"{entity_type}: {dialog.entity.title}")
                    if hasattr(dialog.entity, 'username') and dialog.entity.username:
                        print(f"  Username: @{dialog.entity.username}")
                    print(f"  ID: {dialog.entity.id}")
                    print()
            
            raise Exception(f"–ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")


    def start_stream_manager(self):
        """–ó–∞–ø—É—Å–∫ StreamManager –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def stream_manager_thread():
            try:
                print("üöÄ –ó–∞–ø—É—Å–∫ StreamManager...")
                self.stream_manager.start()
                
                # –î–µ—Ä–∂–∏–º StreamManager —Ä–∞–±–æ—Ç–∞—é—â–∏–º
                while not self.stop_event.is_set():
                    time.sleep(0.1)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ StreamManager: {e}")
            finally:
                self.stream_manager.stop()
        
        thread = threading.Thread(target=stream_manager_thread, daemon=True, name="StreamManager")
        thread.start()
        return thread

    def send_token_to_stream_manager(self, token):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ StreamManager"""
        try:
            self.stream_manager.touch(token)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token}: {e}")

    async def listen_for_messages(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è Telegram —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
            await self.client.start(phone=Config.PHONE_NUMBER)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
            
            # –ò—â–µ–º –∫–∞–Ω–∞–ª
            entity = await self.find_channel(Config.CHANNEL_NAME)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {entity.title}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º StreamManager
            stream_thread = self.start_stream_manager()
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            await asyncio.sleep(2)
            
            print("üëÇ –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            print("=" * 60)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on(events.NewMessage(chats=entity))
            async def handle_new_message(event):
                message = event.message
                if message.text:
                    token = extract_token_from_message(message.text)
                    if token:
                        print(f"üéØ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {token.upper()}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –≤ StreamManager
                        self.send_token_to_stream_manager(token)
                    else:
                        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤: {message.text[:100]}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            await self.client.run_until_disconnected()
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.stop_event.set()
            
            try:
                await self.client.disconnect()
                print("üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç Telegram")
            except:
                pass
            
            
            print("üèÅ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def main():
    runner = TelegramStreamRunner()
    await runner.listen_for_messages()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Telegram Observer + OHLCV Stream Manager")
    print("=" * 60)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
