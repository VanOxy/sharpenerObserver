#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
–≠–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ ZMQ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É StreamManager.
"""

import time
import threading
import zmq
from ws_ohlcv_manager import StreamManager


def test_zmq_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ZMQ —Å StreamManager"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ZMQ —Å StreamManager")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º StreamManager
    manager = StreamManager()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_manager():
        try:
            manager.start()
            # –î–µ—Ä–∂–∏–º —Ä–∞–±–æ—Ç–∞—é—â–∏–º 30 —Å–µ–∫—É–Ω–¥
            time.sleep(30)
        finally:
            manager.stop()
    
    manager_thread = threading.Thread(target=run_manager, daemon=True)
    manager_thread.start()
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    time.sleep(2)
    
    # –°–æ–∑–¥–∞–µ–º ZMQ Publisher –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    context = zmq.Context()
    publisher = context.socket(zmq.PUB)
    publisher.bind("tcp://127.0.0.1:5556")
    
    print("üì° ZMQ Publisher –∑–∞–ø—É—â–µ–Ω")
    time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ subscriber
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    test_tokens = ["btcusdt", "ethusdt", "bnbusdt"]
    
    for i, token in enumerate(test_tokens):
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω: {token.upper()}")
        publisher.send_string(f"symbol: {token}")
        time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
        
        # –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–∏–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
        if i == 0:
            time.sleep(5)
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω: {token.upper()}")
            publisher.send_string(f"symbol: {token}")
    
    print("\n‚è≥ –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Ä–∞–±–æ—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    time.sleep(15)
    
    print("\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞")
    publisher.close()
    context.term()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è manager
    manager_thread.join(timeout=5)
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_token_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤")
    print("=" * 30)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ run.py
    from run import extract_token_from_message
    
    test_messages = [
        "`BTCUSDT` - —Ö–æ—Ä–æ—à–∏–π —Ç–æ–∫–µ–Ω",
        "–ü–æ–∫—É–ø–∞–µ–º `ETHUSDT` —Å–µ–π—á–∞—Å!",
        "–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
        "`BNBUSDT` –∏ `ADAUSDT` - –¥–≤–∞ —Ç–æ–∫–µ–Ω–∞",
        "`INVALID` - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
        "`SOLUSDT` –≥–æ—Ç–æ–≤ –∫ —Ä–æ—Å—Ç—É"
    ]
    
    for msg in test_messages:
        token = extract_token_from_message(msg)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
        print(f"–¢–æ–∫–µ–Ω: {token.upper() if token else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
        print("-" * 30)


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        test_token_extraction()
        
        # –¢–µ—Å—Ç ZMQ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã)
        print("\n" + "=" * 60)
        test_zmq_integration()
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    print("\nüëã –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
