#!/usr/bin/env python3

import asyncio
import re
from telethon import TelegramClient, events
from config import Config

def extract_token_from_message(text):
    if not text:
        return ''
    match = re.search(r'`([A-Z][A-Z0-9]*)`', text)
    return match.group(1) if match else None

class TelegramObserver:
    
    def __init__(self):
        Config.validate()
        
        self.client = TelegramClient(
            'observer_session',
            Config.API_ID,
            Config.API_HASH
        )
        
        print(f"üîß –°–æ–∑–¥–∞–Ω –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∫–∞–Ω–∞–ª–∞: {Config.CHANNEL_NAME}")
    
    async def find_channel(self, channel_name):
        try:
            if not channel_name.startswith('@'):
                channel_name = '@' + channel_name.replace(' ', '_').lower()
            
            entity = await self.client.get_entity(channel_name)
            return entity
            
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ username, –∏—â–µ–º —Å—Ä–µ–¥–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            print(f"üîç –ò—â–µ–º –∫–∞–Ω–∞–ª '{channel_name}' —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
            
            async for dialog in self.client.iter_dialogs():
                if hasattr(dialog.entity, 'title'):
                    title = dialog.entity.title.lower()
                    search_name = channel_name.replace('@', '').lower()
                    
                    if search_name in title or title in search_name:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: '{dialog.entity.title}' (ID: {dialog.entity.id})")
                        return dialog.entity
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã:")
            print("-" * 50)
            
            async for dialog in self.client.iter_dialogs():
                if hasattr(dialog.entity, 'title'):
                    entity_type = "–ö–∞–Ω–∞–ª" if hasattr(dialog.entity, 'broadcast') and dialog.entity.broadcast else "–ì—Ä—É–ø–ø–∞"
                    print(f"{entity_type}: {dialog.entity.title}")
                    if hasattr(dialog.entity, 'username') and dialog.entity.username:
                        print(f"  Username: @{dialog.entity.username}")
                    print(f"  ID: {dialog.entity.id}")
                    print()
            
            raise Exception(f"–ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def listen_for_messages(self):
        try:
            print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
            await self.client.start(phone=Config.PHONE_NUMBER)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ò—â–µ–º –∫–∞–Ω–∞–ª
            entity = await self.find_channel(Config.CHANNEL_NAME)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {entity.title}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º entity –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
            self.target_entity = entity
            
            print("üëÇ –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            print("=" * 50)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on(events.NewMessage(chats=entity))
            async def handle_new_message(event):
                message = event.message
                if message.text:
                    token = extract_token_from_message(message.text)
                    if token:
                        print(token)
                    else:
                        print("–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            await self.client.run_until_disconnected()
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await self.client.disconnect()
            print("üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç Telegram")

async def main():
    observer = TelegramObserver()
    await observer.listen_for_messages()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥...")
